Stored Procedure
=================
For Oracle:
-----------
Syntax:
----------
create [or replace] procedure <procName> [(<params>)] as/is // Declare the Variable
begin
  // Statements
end; 
/


eg: 
----
create procedure p1(a int,b int,c int) as
sm int;
av int;
begin
sm := a+b+c;
av := sm/3; 
dbms_output.put_line('sum='||sm); dbms_output.put_line('average='||av); 
end;
/

To Execute The Procedure
-------------------------
call p1(10,20,30);
Output:
sum=60
average=20

For MySQL:
-------------
delimiter $
create procedure <procName> ([<params>]) begin
// declare variables
// Statements
end;
$
delimiter ;

eg:
---
delimiter $
create procedure proc1()
begin
select 'Welcome to Procedures' as "Message"; 
end;
$
delimiter ;

eg:
---
delimiter $
create procedure p2(a int, b int)
begin
declare s int;
set s = a+b;
select s as 'SUM';
end;
$
delimiter ;


create procedure proc3(x int, y int, z int)
begin
declare sm int;
declare av int;
set sm = x+y+z;
set av = sm / 3;
select av as "Average";
end;
$


To Execute The Procedure
-------------------------
call proc1(11,22);
call p2(10,20);

Note: delimiter is used to change the character to indicate end of the statement.

To See the procedures 
---------------------- 
For MySQL
----------
show procedure status;

For Oracle
-------------
select * from all_objects where object_type in('PROCEDURE');

1) Without Parameter:
   call showMessage();

To provide the data dynamically into the procedure to perform the operation you can define the parameter.

For Oracle:
<varName> [<paramType>] <dataType> 
eg: id IN int

For MySQL:
[<paramType>] <varName> <dataType> 
eg: IN id int

Types of Parameter
----------------------
      1) INPUT Paremeter
      2) OUTPUT Parameter
      3) INPUT - OUTPUT Parameter
      
1) INPUT PARAMETER
-------------------
You can provide the value to procedure while invoking it.

By Default paremeter type will be input. Optionally you can use IN keyword.

For Oracle
------------
eg:
---
create or replace procedure p2(a int, b in int) as
declare
s int;
begin
s := a+b; 
dbms_output.put_line('SUM = '||s); 
end;
/
-> call p2(10,20);

eg:
---
create table proctable(id int, name varchar(15), fee float);
// Insert some records


For MySQL
----------
eg:
---
delimiter $
create procedure p3(in a int, in b int)
begin
declare s int;
set s=a+b;
select s as "SUM";
end;
$
delimiter ;
->  call p3(12,34);

eg:
---
create table proctable(id int primary key auto_increment, name varchar(15), fee float) auto_increment=101;
// Insert some records

delimiter $
create procedure Proc4(inst1 int, IN inst2 int)
begin
declare s int;
set s = inst1 + inst2;
select s as "Result";
insert into proctable (name, fee) values ('cheenu', s); 
end;
$
delimiter ;

2) OUTPUT Parameter
--------------------
You can access the result from the procedure after executing that. You can use OUT keyword to define output parameter.

For Oracle
------------
eg:
---
create or replace procedure p3(a int, b in int, res out int) as
begin
res := a+b;
dbms_output.put_line('SUM ='||res); 
end;
/
-> var r1 number;
     call p3(10,20,:r1);

print r1;

-> Use that variable as :r1 (Try to insert the record in some table using this variable)

eg:
create procedure SumProc(ab int, bc int, res out int) as begin
res := ab+bc;
end;
/
-> variable s number;
call SumProc(12,20,:s); 
print s;

For MySQL
------------
eg:
---
delimiter $
create procedure p4(in a int, in b int, out s int) begin
set s = a+b;
select s as "SUM";
end;
$
delimiter ;

-> set @r1 = 0;
     call p4(10,20,@r1);
select @r1;

3) INPUT - OUTPUT Parameter
----------------------------
By using INPUT-OUTPUT params, you can provide the value while invoking the procedure and access the result also from the procedure.

You can use following keyword to define input output parameter.

IN OUT (Oracle)
INOUT (MySQL)

For Oracle
-----------
eg:
create or replace procedure p4(a in int,b in out int) as
begin
b := b+a;
dbms_output.put_line('SUM ='||b); 
end;
/

eg:
create procedure SumProc1(ab int, bc IN OUT int) as begin
bc := ab+bc;
end;
/
-> variable res number;
     exec :res := 100;
     call SumProc1(19, :res);
     print res;//119

eg:
----
create or replace procedure updateInfo(sid int, nm OUT varchar, sfe IN OUT float) as
begin
update proctable set fee = fee + sfe where id = sid;
end;
/
->   
var nf number;
exec :nf := 1000;
var snm varchar2(15);
call updateInfo(102,:snm,:nf); 
print snm;
print nf;

For MySQL
------------
eg:
---
delimiter $
create procedure proc5(in a int,inout b int) begin
set b=b+a;
select b as "SUM";
end;
$
delimiter ;

eg:
---
delimiter $
create procedure storeInfo(nm varchar(15), sfee float) 
begin
insert into proctable (name,fee) values (nm,sfee); end;
$
delimiter ;


eg:
---
delimiter $
create procedure updateInfo(sid int, out nm varchar(15), inout sfe float) begin
update proctable set fee=fee+sfe where id=sid;
select name, fee into nm, sfe from proctable where id=sid;
end;
$
delimiter ;
-> set @nf=1000;
call updateInfo(101,@snm,@nf); select @snm;
select @nf;

For Oracle:
------------
var r2 number;
exec :r2 := 100;
call addValue1(10,:r2);
print r2;

For MySQL:
------------
set @r2 = 100;
call addValue1(10,@r2);
select @r2;

Examples
---------
For Oracle
-----------
eg:
---
create table student(sid int, m1 int, m2 int, m3 int, sum int, average float, status char(10));
insert into student(sid,m1,m2,m3) values(101,65,75,85); insert into student(sid,m1,m2,m3) values(102,45,30,45); insert into student(sid,m1,m2,m3) values(103,60,70,90); insert into student(sid,m1,m2,m3) values(104,88,44,44); insert into student(sid,m1,m2,m3) values(105,99,77,66);

Assignement 1 (Oracle) - Without Loop
Q) Write one StoredProcedure which should collect all the marks of one student from students table and find out his/her status and update the table ?

Assignement 2 (MySQL) - Without Loop
Q) Write one StoredProcedure which should collect all the marks of one student from students table and find out his/her status and update the table ?

Assignement 3 (Oracle)
Q) Write one StoredProcedure which should collect all the marks of all the students from students table and find out their status and update the table ?

Assignement 4 (MySQL)
Q) Write one StoredProcedure which should collect all the marks of all the students from students table and find out their status and update the table ?

Solutions
=========

create or replace procedure p11(id int) as
ssd int;
mm1 int;
mm2 int;
mm3 int;
sm  int;
avrg float;
stat char(10);
begin
ssd:=id;
loop
select m1,m2,m3 into mm1,mm2,mm3 from student where sid=ssd;
sm:=mm1+mm2+mm3;
avrg:=sm/3;
if (avrg>60) then
stat:='passed';
else
stat:='fail';
end if;
update student set sum=sm,average=avrg,status=stat where sid=ssd; 
ssd:=ssd+1;
exit when(ssd>106);
end loop;
end; 
/

Note: If you want to see errors then
show err;
or
show errors;

For MySQL (Using While do loop) 
------------------------------- 
delimiter $
create procedure updateProc2(sdd int) begin
declare id int;
declare mm1 int;
declare mm2 int;
declare mm3 int;
declare sm int;
declare avrg float;
declare stat char(10);
set id=sdd;
while (id<106) do
select m1,m2,m3 into mm1,mm2,mm3 from student where sid=id;
set sm=mm1+mm2+mm3;
set avrg=sm/3;
if (avrg>60) then
set stat='passed';
else
set stat='fail';
end if;
update student set sum=sm,average=avrg,status=stat where sid=id; set id=id+1;
end while;
end;
$
delimiter ;

For MySQL (Without using looping statements with same table) 
------------------------------------------------------------
delimiter $
create procedure updateProc1(id int)
begin
declare mm1 int;
declare mm2 int;
declare mm3 int;
declare sm int;
declare avrg float;
declare stat char(10);
select m1,m2,m3 into mm1,mm2,mm3 from student where sid=id;
set sm=mm1+mm2+mm3;
set avrg=sm/3;
if (avrg>60) then
set stat='passed';
else
set stat='fail';
end if;
update student set sum=sm,average=avrg,status=stat where sid=id; end;
$
delimiter ;

Note: drop procedure <procName>;









